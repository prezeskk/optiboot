
optiboot_atmega1280.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  0001fe6a  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026a  0001fc00  0001fc00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0001fffe  0001fffe  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000c84  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d5a  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001cde  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

0001fc00 <main>:
   1fc00:	1f 92       	push	r1
   1fc02:	cd b7       	in	r28, 0x3d	; 61
   1fc04:	de b7       	in	r29, 0x3e	; 62
   1fc06:	11 24       	eor	r1, r1
   1fc08:	84 b7       	in	r24, 0x34	; 52
   1fc0a:	14 be       	out	0x34, r1	; 52
   1fc0c:	98 2f       	mov	r25, r24
   1fc0e:	9d 70       	andi	r25, 0x0D	; 13
   1fc10:	09 f0       	breq	.+2      	; 0x1fc14 <main+0x14>
   1fc12:	0f d1       	rcall	.+542    	; 0x1fe32 <appStart>
   1fc14:	85 e0       	ldi	r24, 0x05	; 5
   1fc16:	80 93 81 00 	sts	0x0081, r24
   1fc1a:	82 e0       	ldi	r24, 0x02	; 2
   1fc1c:	80 93 c0 00 	sts	0x00C0, r24
   1fc20:	88 e1       	ldi	r24, 0x18	; 24
   1fc22:	80 93 c1 00 	sts	0x00C1, r24
   1fc26:	86 e0       	ldi	r24, 0x06	; 6
   1fc28:	80 93 c2 00 	sts	0x00C2, r24
   1fc2c:	80 e1       	ldi	r24, 0x10	; 16
   1fc2e:	80 93 c4 00 	sts	0x00C4, r24
   1fc32:	8e e0       	ldi	r24, 0x0E	; 14
   1fc34:	e9 d0       	rcall	.+466    	; 0x1fe08 <watchdogConfig>
   1fc36:	27 9a       	sbi	0x04, 7	; 4
   1fc38:	26 e0       	ldi	r18, 0x06	; 6
   1fc3a:	80 e3       	ldi	r24, 0x30	; 48
   1fc3c:	9c ef       	ldi	r25, 0xFC	; 252
   1fc3e:	31 e0       	ldi	r19, 0x01	; 1
   1fc40:	90 93 85 00 	sts	0x0085, r25
   1fc44:	80 93 84 00 	sts	0x0084, r24
   1fc48:	36 bb       	out	0x16, r19	; 22
   1fc4a:	b0 9b       	sbis	0x16, 0	; 22
   1fc4c:	fe cf       	rjmp	.-4      	; 0x1fc4a <main+0x4a>
   1fc4e:	1f 9a       	sbi	0x03, 7	; 3
   1fc50:	a8 95       	wdr
   1fc52:	21 50       	subi	r18, 0x01	; 1
   1fc54:	a9 f7       	brne	.-22     	; 0x1fc40 <main+0x40>
   1fc56:	61 2c       	mov	r6, r1
   1fc58:	71 2c       	mov	r7, r1
   1fc5a:	dd 24       	eor	r13, r13
   1fc5c:	d3 94       	inc	r13
   1fc5e:	45 e0       	ldi	r20, 0x05	; 5
   1fc60:	c4 2e       	mov	r12, r20
   1fc62:	51 e1       	ldi	r21, 0x11	; 17
   1fc64:	b5 2e       	mov	r11, r21
   1fc66:	c4 d0       	rcall	.+392    	; 0x1fdf0 <getch>
   1fc68:	81 34       	cpi	r24, 0x41	; 65
   1fc6a:	d1 f4       	brne	.+52     	; 0x1fca0 <main+0xa0>
   1fc6c:	c1 d0       	rcall	.+386    	; 0x1fdf0 <getch>
   1fc6e:	89 83       	std	Y+1, r24	; 0x01
   1fc70:	d1 d0       	rcall	.+418    	; 0x1fe14 <verifySpace>
   1fc72:	89 81       	ldd	r24, Y+1	; 0x01
   1fc74:	82 38       	cpi	r24, 0x82	; 130
   1fc76:	11 f4       	brne	.+4      	; 0x1fc7c <main+0x7c>
   1fc78:	82 e0       	ldi	r24, 0x02	; 2
   1fc7a:	10 c0       	rjmp	.+32     	; 0x1fc9c <main+0x9c>
   1fc7c:	81 38       	cpi	r24, 0x81	; 129
   1fc7e:	69 f4       	brne	.+26     	; 0x1fc9a <main+0x9a>
   1fc80:	86 e0       	ldi	r24, 0x06	; 6
   1fc82:	0c c0       	rjmp	.+24     	; 0x1fc9c <main+0x9c>
   1fc84:	84 37       	cpi	r24, 0x74	; 116
   1fc86:	09 f4       	brne	.+2      	; 0x1fc8a <main+0x8a>
   1fc88:	80 c0       	rjmp	.+256    	; 0x1fd8a <main+0x18a>
   1fc8a:	85 37       	cpi	r24, 0x75	; 117
   1fc8c:	09 f0       	breq	.+2      	; 0x1fc90 <main+0x90>
   1fc8e:	a1 c0       	rjmp	.+322    	; 0x1fdd2 <main+0x1d2>
   1fc90:	c1 d0       	rcall	.+386    	; 0x1fe14 <verifySpace>
   1fc92:	8e e1       	ldi	r24, 0x1E	; 30
   1fc94:	a6 d0       	rcall	.+332    	; 0x1fde2 <putch>
   1fc96:	87 e9       	ldi	r24, 0x97	; 151
   1fc98:	a4 d0       	rcall	.+328    	; 0x1fde2 <putch>
   1fc9a:	83 e0       	ldi	r24, 0x03	; 3
   1fc9c:	a2 d0       	rcall	.+324    	; 0x1fde2 <putch>
   1fc9e:	9e c0       	rjmp	.+316    	; 0x1fddc <main+0x1dc>
   1fca0:	82 34       	cpi	r24, 0x42	; 66
   1fca2:	11 f4       	brne	.+4      	; 0x1fca8 <main+0xa8>
   1fca4:	84 e1       	ldi	r24, 0x14	; 20
   1fca6:	03 c0       	rjmp	.+6      	; 0x1fcae <main+0xae>
   1fca8:	85 34       	cpi	r24, 0x45	; 69
   1fcaa:	19 f4       	brne	.+6      	; 0x1fcb2 <main+0xb2>
   1fcac:	85 e0       	ldi	r24, 0x05	; 5
   1fcae:	ba d0       	rcall	.+372    	; 0x1fe24 <getNch>
   1fcb0:	95 c0       	rjmp	.+298    	; 0x1fddc <main+0x1dc>
   1fcb2:	85 35       	cpi	r24, 0x55	; 85
   1fcb4:	69 f4       	brne	.+26     	; 0x1fcd0 <main+0xd0>
   1fcb6:	9c d0       	rcall	.+312    	; 0x1fdf0 <getch>
   1fcb8:	68 2e       	mov	r6, r24
   1fcba:	9a d0       	rcall	.+308    	; 0x1fdf0 <getch>
   1fcbc:	71 2c       	mov	r7, r1
   1fcbe:	78 2a       	or	r7, r24
   1fcc0:	87 2d       	mov	r24, r7
   1fcc2:	88 1f       	adc	r24, r24
   1fcc4:	88 27       	eor	r24, r24
   1fcc6:	88 1f       	adc	r24, r24
   1fcc8:	8b bf       	out	0x3b, r24	; 59
   1fcca:	66 0c       	add	r6, r6
   1fccc:	77 1c       	adc	r7, r7
   1fcce:	85 c0       	rjmp	.+266    	; 0x1fdda <main+0x1da>
   1fcd0:	86 35       	cpi	r24, 0x56	; 86
   1fcd2:	21 f4       	brne	.+8      	; 0x1fcdc <main+0xdc>
   1fcd4:	84 e0       	ldi	r24, 0x04	; 4
   1fcd6:	a6 d0       	rcall	.+332    	; 0x1fe24 <getNch>
   1fcd8:	80 e0       	ldi	r24, 0x00	; 0
   1fcda:	e0 cf       	rjmp	.-64     	; 0x1fc9c <main+0x9c>
   1fcdc:	84 36       	cpi	r24, 0x64	; 100
   1fcde:	91 f6       	brne	.-92     	; 0x1fc84 <main+0x84>
   1fce0:	87 d0       	rcall	.+270    	; 0x1fdf0 <getch>
   1fce2:	08 2f       	mov	r16, r24
   1fce4:	10 e0       	ldi	r17, 0x00	; 0
   1fce6:	10 2f       	mov	r17, r16
   1fce8:	00 27       	eor	r16, r16
   1fcea:	82 d0       	rcall	.+260    	; 0x1fdf0 <getch>
   1fcec:	08 2b       	or	r16, r24
   1fcee:	80 d0       	rcall	.+256    	; 0x1fdf0 <getch>
   1fcf0:	a8 2e       	mov	r10, r24
   1fcf2:	78 01       	movw	r14, r16
   1fcf4:	81 2c       	mov	r8, r1
   1fcf6:	22 e0       	ldi	r18, 0x02	; 2
   1fcf8:	92 2e       	mov	r9, r18
   1fcfa:	7a d0       	rcall	.+244    	; 0x1fdf0 <getch>
   1fcfc:	f4 01       	movw	r30, r8
   1fcfe:	81 93       	st	Z+, r24
   1fd00:	4f 01       	movw	r8, r30
   1fd02:	f1 e0       	ldi	r31, 0x01	; 1
   1fd04:	ef 1a       	sub	r14, r31
   1fd06:	f1 08       	sbc	r15, r1
   1fd08:	e1 14       	cp	r14, r1
   1fd0a:	f1 04       	cpc	r15, r1
   1fd0c:	b1 f7       	brne	.-20     	; 0x1fcfa <main+0xfa>
   1fd0e:	82 d0       	rcall	.+260    	; 0x1fe14 <verifySpace>
   1fd10:	85 e4       	ldi	r24, 0x45	; 69
   1fd12:	a8 12       	cpse	r10, r24
   1fd14:	13 c0       	rjmp	.+38     	; 0x1fd3c <main+0x13c>
   1fd16:	48 01       	movw	r8, r16
   1fd18:	86 0c       	add	r8, r6
   1fd1a:	97 1c       	adc	r9, r7
   1fd1c:	73 01       	movw	r14, r6
   1fd1e:	00 e0       	ldi	r16, 0x00	; 0
   1fd20:	12 e0       	ldi	r17, 0x02	; 2
   1fd22:	e8 14       	cp	r14, r8
   1fd24:	f9 04       	cpc	r15, r9
   1fd26:	09 f4       	brne	.+2      	; 0x1fd2a <main+0x12a>
   1fd28:	59 c0       	rjmp	.+178    	; 0x1fddc <main+0x1dc>
   1fd2a:	f8 01       	movw	r30, r16
   1fd2c:	61 91       	ld	r22, Z+
   1fd2e:	8f 01       	movw	r16, r30
   1fd30:	c7 01       	movw	r24, r14
   1fd32:	8d d0       	rcall	.+282    	; 0x1fe4e <__eewr_byte_m1280>
   1fd34:	ff ef       	ldi	r31, 0xFF	; 255
   1fd36:	ef 1a       	sub	r14, r31
   1fd38:	ff 0a       	sbc	r15, r31
   1fd3a:	f3 cf       	rjmp	.-26     	; 0x1fd22 <main+0x122>
   1fd3c:	83 e0       	ldi	r24, 0x03	; 3
   1fd3e:	f3 01       	movw	r30, r6
   1fd40:	87 bf       	out	0x37, r24	; 55
   1fd42:	e8 95       	spm
   1fd44:	07 b6       	in	r0, 0x37	; 55
   1fd46:	00 fc       	sbrc	r0, 0
   1fd48:	fd cf       	rjmp	.-6      	; 0x1fd44 <main+0x144>
   1fd4a:	20 e0       	ldi	r18, 0x00	; 0
   1fd4c:	30 e0       	ldi	r19, 0x00	; 0
   1fd4e:	f9 01       	movw	r30, r18
   1fd50:	fe 5f       	subi	r31, 0xFE	; 254
   1fd52:	80 81       	ld	r24, Z
   1fd54:	f9 01       	movw	r30, r18
   1fd56:	e6 0d       	add	r30, r6
   1fd58:	f7 1d       	adc	r31, r7
   1fd5a:	d9 01       	movw	r26, r18
   1fd5c:	af 5f       	subi	r26, 0xFF	; 255
   1fd5e:	bd 4f       	sbci	r27, 0xFD	; 253
   1fd60:	4c 91       	ld	r20, X
   1fd62:	90 e0       	ldi	r25, 0x00	; 0
   1fd64:	94 2b       	or	r25, r20
   1fd66:	0c 01       	movw	r0, r24
   1fd68:	d7 be       	out	0x37, r13	; 55
   1fd6a:	e8 95       	spm
   1fd6c:	11 24       	eor	r1, r1
   1fd6e:	2e 5f       	subi	r18, 0xFE	; 254
   1fd70:	3f 4f       	sbci	r19, 0xFF	; 255
   1fd72:	02 17       	cp	r16, r18
   1fd74:	13 07       	cpc	r17, r19
   1fd76:	59 f7       	brne	.-42     	; 0x1fd4e <main+0x14e>
   1fd78:	f3 01       	movw	r30, r6
   1fd7a:	c7 be       	out	0x37, r12	; 55
   1fd7c:	e8 95       	spm
   1fd7e:	07 b6       	in	r0, 0x37	; 55
   1fd80:	00 fc       	sbrc	r0, 0
   1fd82:	fd cf       	rjmp	.-6      	; 0x1fd7e <main+0x17e>
   1fd84:	b7 be       	out	0x37, r11	; 55
   1fd86:	e8 95       	spm
   1fd88:	29 c0       	rjmp	.+82     	; 0x1fddc <main+0x1dc>
   1fd8a:	32 d0       	rcall	.+100    	; 0x1fdf0 <getch>
   1fd8c:	08 2f       	mov	r16, r24
   1fd8e:	10 e0       	ldi	r17, 0x00	; 0
   1fd90:	10 2f       	mov	r17, r16
   1fd92:	00 27       	eor	r16, r16
   1fd94:	2d d0       	rcall	.+90     	; 0x1fdf0 <getch>
   1fd96:	08 2b       	or	r16, r24
   1fd98:	2b d0       	rcall	.+86     	; 0x1fdf0 <getch>
   1fd9a:	89 83       	std	Y+1, r24	; 0x01
   1fd9c:	3b d0       	rcall	.+118    	; 0x1fe14 <verifySpace>
   1fd9e:	89 81       	ldd	r24, Y+1	; 0x01
   1fda0:	73 01       	movw	r14, r6
   1fda2:	85 34       	cpi	r24, 0x45	; 69
   1fda4:	61 f4       	brne	.+24     	; 0x1fdbe <main+0x1be>
   1fda6:	c7 01       	movw	r24, r14
   1fda8:	4a d0       	rcall	.+148    	; 0x1fe3e <__eerd_byte_m1280>
   1fdaa:	1b d0       	rcall	.+54     	; 0x1fde2 <putch>
   1fdac:	01 50       	subi	r16, 0x01	; 1
   1fdae:	11 09       	sbc	r17, r1
   1fdb0:	ff ef       	ldi	r31, 0xFF	; 255
   1fdb2:	ef 1a       	sub	r14, r31
   1fdb4:	ff 0a       	sbc	r15, r31
   1fdb6:	01 15       	cp	r16, r1
   1fdb8:	11 05       	cpc	r17, r1
   1fdba:	a9 f7       	brne	.-22     	; 0x1fda6 <main+0x1a6>
   1fdbc:	0f c0       	rjmp	.+30     	; 0x1fddc <main+0x1dc>
   1fdbe:	f7 01       	movw	r30, r14
   1fdc0:	87 91       	elpm	r24, Z+
   1fdc2:	7f 01       	movw	r14, r30
   1fdc4:	0e d0       	rcall	.+28     	; 0x1fde2 <putch>
   1fdc6:	01 50       	subi	r16, 0x01	; 1
   1fdc8:	11 09       	sbc	r17, r1
   1fdca:	01 15       	cp	r16, r1
   1fdcc:	11 05       	cpc	r17, r1
   1fdce:	b9 f7       	brne	.-18     	; 0x1fdbe <main+0x1be>
   1fdd0:	05 c0       	rjmp	.+10     	; 0x1fddc <main+0x1dc>
   1fdd2:	81 35       	cpi	r24, 0x51	; 81
   1fdd4:	11 f4       	brne	.+4      	; 0x1fdda <main+0x1da>
   1fdd6:	88 e0       	ldi	r24, 0x08	; 8
   1fdd8:	17 d0       	rcall	.+46     	; 0x1fe08 <watchdogConfig>
   1fdda:	1c d0       	rcall	.+56     	; 0x1fe14 <verifySpace>
   1fddc:	80 e1       	ldi	r24, 0x10	; 16
   1fdde:	01 d0       	rcall	.+2      	; 0x1fde2 <putch>
   1fde0:	42 cf       	rjmp	.-380    	; 0x1fc66 <main+0x66>

0001fde2 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
   1fde2:	90 91 c0 00 	lds	r25, 0x00C0
   1fde6:	95 ff       	sbrs	r25, 5
   1fde8:	fc cf       	rjmp	.-8      	; 0x1fde2 <putch>
  UART_UDR = ch;
   1fdea:	80 93 c6 00 	sts	0x00C6, r24
   1fdee:	08 95       	ret

0001fdf0 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
   1fdf0:	80 91 c0 00 	lds	r24, 0x00C0
   1fdf4:	87 ff       	sbrs	r24, 7
   1fdf6:	fc cf       	rjmp	.-8      	; 0x1fdf0 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
   1fdf8:	80 91 c0 00 	lds	r24, 0x00C0
   1fdfc:	84 fd       	sbrc	r24, 4
   1fdfe:	01 c0       	rjmp	.+2      	; 0x1fe02 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fe00:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
   1fe02:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
   1fe06:	08 95       	ret

0001fe08 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fe08:	e0 e6       	ldi	r30, 0x60	; 96
   1fe0a:	f0 e0       	ldi	r31, 0x00	; 0
   1fe0c:	98 e1       	ldi	r25, 0x18	; 24
   1fe0e:	90 83       	st	Z, r25
  WDTCSR = x;
   1fe10:	80 83       	st	Z, r24
   1fe12:	08 95       	ret

0001fe14 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
   1fe14:	ed df       	rcall	.-38     	; 0x1fdf0 <getch>
   1fe16:	80 32       	cpi	r24, 0x20	; 32
   1fe18:	19 f0       	breq	.+6      	; 0x1fe20 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
   1fe1a:	88 e0       	ldi	r24, 0x08	; 8
   1fe1c:	f5 df       	rcall	.-22     	; 0x1fe08 <watchdogConfig>
   1fe1e:	ff cf       	rjmp	.-2      	; 0x1fe1e <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
   1fe20:	84 e1       	ldi	r24, 0x14	; 20
   1fe22:	df cf       	rjmp	.-66     	; 0x1fde2 <putch>

0001fe24 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
   1fe24:	cf 93       	push	r28
   1fe26:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
   1fe28:	e3 df       	rcall	.-58     	; 0x1fdf0 <getch>
   1fe2a:	c1 50       	subi	r28, 0x01	; 1
   1fe2c:	e9 f7       	brne	.-6      	; 0x1fe28 <getNch+0x4>
  verifySpace();
}
   1fe2e:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
   1fe30:	f1 cf       	rjmp	.-30     	; 0x1fe14 <verifySpace>

0001fe32 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
   1fe32:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
   1fe34:	80 e0       	ldi	r24, 0x00	; 0
   1fe36:	e8 df       	rcall	.-48     	; 0x1fe08 <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
   1fe38:	e0 e0       	ldi	r30, 0x00	; 0
   1fe3a:	ff 27       	eor	r31, r31
   1fe3c:	09 94       	ijmp

0001fe3e <__eerd_byte_m1280>:
    // Jump to 'save' or RST vector
    "ldi r30,%[rstvec]\n"
    "clr r31\n"
    "ijmp\n"::[rstvec] "M"(appstart_vec)
  );
}
   1fe3e:	f9 99       	sbic	0x1f, 1	; 31
   1fe40:	fe cf       	rjmp	.-4      	; 0x1fe3e <__eerd_byte_m1280>
   1fe42:	92 bd       	out	0x22, r25	; 34
   1fe44:	81 bd       	out	0x21, r24	; 33
   1fe46:	f8 9a       	sbi	0x1f, 0	; 31
   1fe48:	99 27       	eor	r25, r25
   1fe4a:	80 b5       	in	r24, 0x20	; 32
   1fe4c:	08 95       	ret

0001fe4e <__eewr_byte_m1280>:
   1fe4e:	26 2f       	mov	r18, r22

0001fe50 <__eewr_r18_m1280>:
   1fe50:	f9 99       	sbic	0x1f, 1	; 31
   1fe52:	fe cf       	rjmp	.-4      	; 0x1fe50 <__eewr_r18_m1280>
   1fe54:	1f ba       	out	0x1f, r1	; 31
   1fe56:	92 bd       	out	0x22, r25	; 34
   1fe58:	81 bd       	out	0x21, r24	; 33
   1fe5a:	20 bd       	out	0x20, r18	; 32
   1fe5c:	0f b6       	in	r0, 0x3f	; 63
   1fe5e:	f8 94       	cli
   1fe60:	fa 9a       	sbi	0x1f, 2	; 31
   1fe62:	f9 9a       	sbi	0x1f, 1	; 31
   1fe64:	0f be       	out	0x3f, r0	; 63
   1fe66:	01 96       	adiw	r24, 0x01	; 1
   1fe68:	08 95       	ret
