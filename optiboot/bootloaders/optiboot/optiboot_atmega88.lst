
optiboot_atmega88.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00001fce  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00001e00  00001e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00001ffe  00001ffe  00000262  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000c24  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d6d  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001bf5  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00001e00 <main>:
    1e00:	1f 92       	push	r1
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	11 24       	eor	r1, r1
    1e08:	84 b7       	in	r24, 0x34	; 52
    1e0a:	14 be       	out	0x34, r1	; 52
    1e0c:	98 2f       	mov	r25, r24
    1e0e:	9d 70       	andi	r25, 0x0D	; 13
    1e10:	09 f0       	breq	.+2      	; 0x1e14 <main+0x14>
    1e12:	d7 d0       	rcall	.+430    	; 0x1fc2 <appStart>
    1e14:	85 e0       	ldi	r24, 0x05	; 5
    1e16:	80 93 81 00 	sts	0x0081, r24
    1e1a:	82 e0       	ldi	r24, 0x02	; 2
    1e1c:	80 93 c0 00 	sts	0x00C0, r24
    1e20:	88 e1       	ldi	r24, 0x18	; 24
    1e22:	80 93 c1 00 	sts	0x00C1, r24
    1e26:	86 e0       	ldi	r24, 0x06	; 6
    1e28:	80 93 c2 00 	sts	0x00C2, r24
    1e2c:	80 e1       	ldi	r24, 0x10	; 16
    1e2e:	80 93 c4 00 	sts	0x00C4, r24
    1e32:	8e e0       	ldi	r24, 0x0E	; 14
    1e34:	b1 d0       	rcall	.+354    	; 0x1f98 <watchdogConfig>
    1e36:	25 9a       	sbi	0x04, 5	; 4
    1e38:	26 e0       	ldi	r18, 0x06	; 6
    1e3a:	80 e3       	ldi	r24, 0x30	; 48
    1e3c:	9c ef       	ldi	r25, 0xFC	; 252
    1e3e:	31 e0       	ldi	r19, 0x01	; 1
    1e40:	90 93 85 00 	sts	0x0085, r25
    1e44:	80 93 84 00 	sts	0x0084, r24
    1e48:	36 bb       	out	0x16, r19	; 22
    1e4a:	b0 9b       	sbis	0x16, 0	; 22
    1e4c:	fe cf       	rjmp	.-4      	; 0x1e4a <main+0x4a>
    1e4e:	1d 9a       	sbi	0x03, 5	; 3
    1e50:	a8 95       	wdr
    1e52:	21 50       	subi	r18, 0x01	; 1
    1e54:	a9 f7       	brne	.-22     	; 0x1e40 <main+0x40>
    1e56:	81 2c       	mov	r8, r1
    1e58:	91 2c       	mov	r9, r1
    1e5a:	93 e0       	ldi	r25, 0x03	; 3
    1e5c:	f9 2e       	mov	r15, r25
    1e5e:	ee 24       	eor	r14, r14
    1e60:	e3 94       	inc	r14
    1e62:	25 e0       	ldi	r18, 0x05	; 5
    1e64:	d2 2e       	mov	r13, r18
    1e66:	31 e1       	ldi	r19, 0x11	; 17
    1e68:	c3 2e       	mov	r12, r19
    1e6a:	8a d0       	rcall	.+276    	; 0x1f80 <getch>
    1e6c:	81 34       	cpi	r24, 0x41	; 65
    1e6e:	79 f4       	brne	.+30     	; 0x1e8e <main+0x8e>
    1e70:	87 d0       	rcall	.+270    	; 0x1f80 <getch>
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	97 d0       	rcall	.+302    	; 0x1fa4 <verifySpace>
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	82 38       	cpi	r24, 0x82	; 130
    1e7a:	11 f4       	brne	.+4      	; 0x1e80 <main+0x80>
    1e7c:	82 e0       	ldi	r24, 0x02	; 2
    1e7e:	05 c0       	rjmp	.+10     	; 0x1e8a <main+0x8a>
    1e80:	81 38       	cpi	r24, 0x81	; 129
    1e82:	11 f4       	brne	.+4      	; 0x1e88 <main+0x88>
    1e84:	86 e0       	ldi	r24, 0x06	; 6
    1e86:	01 c0       	rjmp	.+2      	; 0x1e8a <main+0x8a>
    1e88:	83 e0       	ldi	r24, 0x03	; 3
    1e8a:	73 d0       	rcall	.+230    	; 0x1f72 <putch>
    1e8c:	6f c0       	rjmp	.+222    	; 0x1f6c <main+0x16c>
    1e8e:	82 34       	cpi	r24, 0x42	; 66
    1e90:	11 f4       	brne	.+4      	; 0x1e96 <main+0x96>
    1e92:	84 e1       	ldi	r24, 0x14	; 20
    1e94:	03 c0       	rjmp	.+6      	; 0x1e9c <main+0x9c>
    1e96:	85 34       	cpi	r24, 0x45	; 69
    1e98:	19 f4       	brne	.+6      	; 0x1ea0 <main+0xa0>
    1e9a:	85 e0       	ldi	r24, 0x05	; 5
    1e9c:	8b d0       	rcall	.+278    	; 0x1fb4 <getNch>
    1e9e:	66 c0       	rjmp	.+204    	; 0x1f6c <main+0x16c>
    1ea0:	85 35       	cpi	r24, 0x55	; 85
    1ea2:	41 f4       	brne	.+16     	; 0x1eb4 <main+0xb4>
    1ea4:	6d d0       	rcall	.+218    	; 0x1f80 <getch>
    1ea6:	88 2e       	mov	r8, r24
    1ea8:	6b d0       	rcall	.+214    	; 0x1f80 <getch>
    1eaa:	91 2c       	mov	r9, r1
    1eac:	98 2a       	or	r9, r24
    1eae:	88 0c       	add	r8, r8
    1eb0:	99 1c       	adc	r9, r9
    1eb2:	5b c0       	rjmp	.+182    	; 0x1f6a <main+0x16a>
    1eb4:	86 35       	cpi	r24, 0x56	; 86
    1eb6:	21 f4       	brne	.+8      	; 0x1ec0 <main+0xc0>
    1eb8:	84 e0       	ldi	r24, 0x04	; 4
    1eba:	7c d0       	rcall	.+248    	; 0x1fb4 <getNch>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	e5 cf       	rjmp	.-54     	; 0x1e8a <main+0x8a>
    1ec0:	84 36       	cpi	r24, 0x64	; 100
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <main+0xc6>
    1ec4:	36 c0       	rjmp	.+108    	; 0x1f32 <main+0x132>
    1ec6:	5c d0       	rcall	.+184    	; 0x1f80 <getch>
    1ec8:	5b d0       	rcall	.+182    	; 0x1f80 <getch>
    1eca:	b8 2e       	mov	r11, r24
    1ecc:	59 d0       	rcall	.+178    	; 0x1f80 <getch>
    1ece:	a8 2e       	mov	r10, r24
    1ed0:	00 e0       	ldi	r16, 0x00	; 0
    1ed2:	11 e0       	ldi	r17, 0x01	; 1
    1ed4:	55 d0       	rcall	.+170    	; 0x1f80 <getch>
    1ed6:	f8 01       	movw	r30, r16
    1ed8:	81 93       	st	Z+, r24
    1eda:	8f 01       	movw	r16, r30
    1edc:	be 12       	cpse	r11, r30
    1ede:	fa cf       	rjmp	.-12     	; 0x1ed4 <main+0xd4>
    1ee0:	61 d0       	rcall	.+194    	; 0x1fa4 <verifySpace>
    1ee2:	f5 e4       	ldi	r31, 0x45	; 69
    1ee4:	af 12       	cpse	r10, r31
    1ee6:	01 c0       	rjmp	.+2      	; 0x1eea <main+0xea>
    1ee8:	ff cf       	rjmp	.-2      	; 0x1ee8 <main+0xe8>
    1eea:	f4 01       	movw	r30, r8
    1eec:	f7 be       	out	0x37, r15	; 55
    1eee:	e8 95       	spm
    1ef0:	07 b6       	in	r0, 0x37	; 55
    1ef2:	00 fc       	sbrc	r0, 0
    1ef4:	fd cf       	rjmp	.-6      	; 0x1ef0 <main+0xf0>
    1ef6:	b4 01       	movw	r22, r8
    1ef8:	a0 e0       	ldi	r26, 0x00	; 0
    1efa:	b1 e0       	ldi	r27, 0x01	; 1
    1efc:	2c 91       	ld	r18, X
    1efe:	12 96       	adiw	r26, 0x02	; 2
    1f00:	ad 01       	movw	r20, r26
    1f02:	41 50       	subi	r20, 0x01	; 1
    1f04:	51 09       	sbc	r21, r1
    1f06:	fa 01       	movw	r30, r20
    1f08:	80 81       	ld	r24, Z
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	38 2b       	or	r19, r24
    1f0e:	fb 01       	movw	r30, r22
    1f10:	09 01       	movw	r0, r18
    1f12:	e7 be       	out	0x37, r14	; 55
    1f14:	e8 95       	spm
    1f16:	11 24       	eor	r1, r1
    1f18:	6e 5f       	subi	r22, 0xFE	; 254
    1f1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1c:	ba 12       	cpse	r11, r26
    1f1e:	ee cf       	rjmp	.-36     	; 0x1efc <main+0xfc>
    1f20:	f4 01       	movw	r30, r8
    1f22:	d7 be       	out	0x37, r13	; 55
    1f24:	e8 95       	spm
    1f26:	07 b6       	in	r0, 0x37	; 55
    1f28:	00 fc       	sbrc	r0, 0
    1f2a:	fd cf       	rjmp	.-6      	; 0x1f26 <main+0x126>
    1f2c:	c7 be       	out	0x37, r12	; 55
    1f2e:	e8 95       	spm
    1f30:	1d c0       	rjmp	.+58     	; 0x1f6c <main+0x16c>
    1f32:	84 37       	cpi	r24, 0x74	; 116
    1f34:	69 f4       	brne	.+26     	; 0x1f50 <main+0x150>
    1f36:	24 d0       	rcall	.+72     	; 0x1f80 <getch>
    1f38:	23 d0       	rcall	.+70     	; 0x1f80 <getch>
    1f3a:	b8 2e       	mov	r11, r24
    1f3c:	21 d0       	rcall	.+66     	; 0x1f80 <getch>
    1f3e:	32 d0       	rcall	.+100    	; 0x1fa4 <verifySpace>
    1f40:	84 01       	movw	r16, r8
    1f42:	f8 01       	movw	r30, r16
    1f44:	85 91       	lpm	r24, Z+
    1f46:	8f 01       	movw	r16, r30
    1f48:	14 d0       	rcall	.+40     	; 0x1f72 <putch>
    1f4a:	ba 94       	dec	r11
    1f4c:	d1 f7       	brne	.-12     	; 0x1f42 <main+0x142>
    1f4e:	0e c0       	rjmp	.+28     	; 0x1f6c <main+0x16c>
    1f50:	85 37       	cpi	r24, 0x75	; 117
    1f52:	39 f4       	brne	.+14     	; 0x1f62 <main+0x162>
    1f54:	27 d0       	rcall	.+78     	; 0x1fa4 <verifySpace>
    1f56:	8e e1       	ldi	r24, 0x1E	; 30
    1f58:	0c d0       	rcall	.+24     	; 0x1f72 <putch>
    1f5a:	83 e9       	ldi	r24, 0x93	; 147
    1f5c:	0a d0       	rcall	.+20     	; 0x1f72 <putch>
    1f5e:	8a e0       	ldi	r24, 0x0A	; 10
    1f60:	94 cf       	rjmp	.-216    	; 0x1e8a <main+0x8a>
    1f62:	81 35       	cpi	r24, 0x51	; 81
    1f64:	11 f4       	brne	.+4      	; 0x1f6a <main+0x16a>
    1f66:	88 e0       	ldi	r24, 0x08	; 8
    1f68:	17 d0       	rcall	.+46     	; 0x1f98 <watchdogConfig>
    1f6a:	1c d0       	rcall	.+56     	; 0x1fa4 <verifySpace>
    1f6c:	80 e1       	ldi	r24, 0x10	; 16
    1f6e:	01 d0       	rcall	.+2      	; 0x1f72 <putch>
    1f70:	7c cf       	rjmp	.-264    	; 0x1e6a <main+0x6a>

00001f72 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    1f72:	90 91 c0 00 	lds	r25, 0x00C0
    1f76:	95 ff       	sbrs	r25, 5
    1f78:	fc cf       	rjmp	.-8      	; 0x1f72 <putch>
  UART_UDR = ch;
    1f7a:	80 93 c6 00 	sts	0x00C6, r24
    1f7e:	08 95       	ret

00001f80 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    1f80:	80 91 c0 00 	lds	r24, 0x00C0
    1f84:	87 ff       	sbrs	r24, 7
    1f86:	fc cf       	rjmp	.-8      	; 0x1f80 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    1f88:	80 91 c0 00 	lds	r24, 0x00C0
    1f8c:	84 fd       	sbrc	r24, 4
    1f8e:	01 c0       	rjmp	.+2      	; 0x1f92 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f90:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    1f92:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    1f96:	08 95       	ret

00001f98 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1f98:	e0 e6       	ldi	r30, 0x60	; 96
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	98 e1       	ldi	r25, 0x18	; 24
    1f9e:	90 83       	st	Z, r25
  WDTCSR = x;
    1fa0:	80 83       	st	Z, r24
    1fa2:	08 95       	ret

00001fa4 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1fa4:	ed df       	rcall	.-38     	; 0x1f80 <getch>
    1fa6:	80 32       	cpi	r24, 0x20	; 32
    1fa8:	19 f0       	breq	.+6      	; 0x1fb0 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1faa:	88 e0       	ldi	r24, 0x08	; 8
    1fac:	f5 df       	rcall	.-22     	; 0x1f98 <watchdogConfig>
    1fae:	ff cf       	rjmp	.-2      	; 0x1fae <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    1fb0:	84 e1       	ldi	r24, 0x14	; 20
    1fb2:	df cf       	rjmp	.-66     	; 0x1f72 <putch>

00001fb4 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    1fb4:	cf 93       	push	r28
    1fb6:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1fb8:	e3 df       	rcall	.-58     	; 0x1f80 <getch>
    1fba:	c1 50       	subi	r28, 0x01	; 1
    1fbc:	e9 f7       	brne	.-6      	; 0x1fb8 <getNch+0x4>
  verifySpace();
}
    1fbe:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    1fc0:	f1 cf       	rjmp	.-30     	; 0x1fa4 <verifySpace>

00001fc2 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    1fc2:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	e8 df       	rcall	.-48     	; 0x1f98 <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    1fc8:	e0 e0       	ldi	r30, 0x00	; 0
    1fca:	ff 27       	eor	r31, r31
    1fcc:	09 94       	ijmp
