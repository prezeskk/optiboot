
optiboot_attiny84.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000234  00001d00  00001d00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00001ffe  00001ffe  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000000  00800060  00001f34  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         00000ca8  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d7f  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001cf3  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00001d00 <main>:
    1d00:	1f 92       	push	r1
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	11 24       	eor	r1, r1
    1d08:	84 b7       	in	r24, 0x34	; 52
    1d0a:	14 be       	out	0x34, r1	; 52
    1d0c:	98 2f       	mov	r25, r24
    1d0e:	9d 70       	andi	r25, 0x0D	; 13
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <main+0x14>
    1d12:	0a d1       	rcall	.+532    	; 0x1f28 <appStart>
    1d14:	8e e0       	ldi	r24, 0x0E	; 14
    1d16:	f5 d0       	rcall	.+490    	; 0x1f02 <watchdogConfig>
    1d18:	d2 9a       	sbi	0x1a, 2	; 26
    1d1a:	90 e8       	ldi	r25, 0x80	; 128
    1d1c:	e9 2e       	mov	r14, r25
    1d1e:	9e e0       	ldi	r25, 0x0E	; 14
    1d20:	f9 2e       	mov	r15, r25
    1d22:	8f e0       	ldi	r24, 0x0F	; 15
    1d24:	f8 22       	and	r15, r24
    1d26:	ef 2d       	mov	r30, r15
    1d28:	e0 6c       	ori	r30, 0xC0	; 192
    1d2a:	de 2e       	mov	r13, r30
    1d2c:	61 2c       	mov	r6, r1
    1d2e:	71 2c       	mov	r7, r1
    1d30:	23 e0       	ldi	r18, 0x03	; 3
    1d32:	c2 2e       	mov	r12, r18
    1d34:	bb 24       	eor	r11, r11
    1d36:	b3 94       	inc	r11
    1d38:	35 e0       	ldi	r19, 0x05	; 5
    1d3a:	a3 2e       	mov	r10, r19
    1d3c:	ce d0       	rcall	.+412    	; 0x1eda <getch>
    1d3e:	81 34       	cpi	r24, 0x41	; 65
    1d40:	79 f4       	brne	.+30     	; 0x1d60 <main+0x60>
    1d42:	cb d0       	rcall	.+406    	; 0x1eda <getch>
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	e1 d0       	rcall	.+450    	; 0x1f0a <verifySpace>
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	82 38       	cpi	r24, 0x82	; 130
    1d4c:	11 f4       	brne	.+4      	; 0x1d52 <main+0x52>
    1d4e:	82 e0       	ldi	r24, 0x02	; 2
    1d50:	05 c0       	rjmp	.+10     	; 0x1d5c <main+0x5c>
    1d52:	81 38       	cpi	r24, 0x81	; 129
    1d54:	11 f4       	brne	.+4      	; 0x1d5a <main+0x5a>
    1d56:	86 e0       	ldi	r24, 0x06	; 6
    1d58:	01 c0       	rjmp	.+2      	; 0x1d5c <main+0x5c>
    1d5a:	83 e0       	ldi	r24, 0x03	; 3
    1d5c:	af d0       	rcall	.+350    	; 0x1ebc <putch>
    1d5e:	ab c0       	rjmp	.+342    	; 0x1eb6 <main+0x1b6>
    1d60:	82 34       	cpi	r24, 0x42	; 66
    1d62:	11 f4       	brne	.+4      	; 0x1d68 <main+0x68>
    1d64:	84 e1       	ldi	r24, 0x14	; 20
    1d66:	03 c0       	rjmp	.+6      	; 0x1d6e <main+0x6e>
    1d68:	85 34       	cpi	r24, 0x45	; 69
    1d6a:	19 f4       	brne	.+6      	; 0x1d72 <main+0x72>
    1d6c:	85 e0       	ldi	r24, 0x05	; 5
    1d6e:	d5 d0       	rcall	.+426    	; 0x1f1a <getNch>
    1d70:	a2 c0       	rjmp	.+324    	; 0x1eb6 <main+0x1b6>
    1d72:	85 35       	cpi	r24, 0x55	; 85
    1d74:	41 f4       	brne	.+16     	; 0x1d86 <main+0x86>
    1d76:	b1 d0       	rcall	.+354    	; 0x1eda <getch>
    1d78:	68 2e       	mov	r6, r24
    1d7a:	af d0       	rcall	.+350    	; 0x1eda <getch>
    1d7c:	71 2c       	mov	r7, r1
    1d7e:	78 2a       	or	r7, r24
    1d80:	66 0c       	add	r6, r6
    1d82:	77 1c       	adc	r7, r7
    1d84:	97 c0       	rjmp	.+302    	; 0x1eb4 <main+0x1b4>
    1d86:	86 35       	cpi	r24, 0x56	; 86
    1d88:	21 f4       	brne	.+8      	; 0x1d92 <main+0x92>
    1d8a:	84 e0       	ldi	r24, 0x04	; 4
    1d8c:	c6 d0       	rcall	.+396    	; 0x1f1a <getNch>
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	e5 cf       	rjmp	.-54     	; 0x1d5c <main+0x5c>
    1d92:	84 36       	cpi	r24, 0x64	; 100
    1d94:	09 f0       	breq	.+2      	; 0x1d98 <main+0x98>
    1d96:	58 c0       	rjmp	.+176    	; 0x1e48 <main+0x148>
    1d98:	a0 d0       	rcall	.+320    	; 0x1eda <getch>
    1d9a:	9f d0       	rcall	.+318    	; 0x1eda <getch>
    1d9c:	98 2e       	mov	r9, r24
    1d9e:	9d d0       	rcall	.+314    	; 0x1eda <getch>
    1da0:	88 2e       	mov	r8, r24
    1da2:	00 e6       	ldi	r16, 0x60	; 96
    1da4:	10 e0       	ldi	r17, 0x00	; 0
    1da6:	f0 e6       	ldi	r31, 0x60	; 96
    1da8:	9f 0e       	add	r9, r31
    1daa:	97 d0       	rcall	.+302    	; 0x1eda <getch>
    1dac:	f8 01       	movw	r30, r16
    1dae:	81 93       	st	Z+, r24
    1db0:	8f 01       	movw	r16, r30
    1db2:	9e 12       	cpse	r9, r30
    1db4:	fa cf       	rjmp	.-12     	; 0x1daa <main+0xaa>
    1db6:	a9 d0       	rcall	.+338    	; 0x1f0a <verifySpace>
    1db8:	61 14       	cp	r6, r1
    1dba:	71 04       	cpc	r7, r1
    1dbc:	01 f5       	brne	.+64     	; 0x1dfe <main+0xfe>
    1dbe:	20 91 60 00 	lds	r18, 0x0060
    1dc2:	20 93 e4 00 	sts	0x00E4, r18
    1dc6:	90 91 61 00 	lds	r25, 0x0061
    1dca:	90 93 e5 00 	sts	0x00E5, r25
    1dce:	80 91 68 00 	lds	r24, 0x0068
    1dd2:	80 93 e6 00 	sts	0x00E6, r24
    1dd6:	80 91 69 00 	lds	r24, 0x0069
    1dda:	80 93 e7 00 	sts	0x00E7, r24
    1dde:	9f 70       	andi	r25, 0x0F	; 15
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	39 2b       	or	r19, r25
    1de4:	24 50       	subi	r18, 0x04	; 4
    1de6:	31 09       	sbc	r19, r1
    1de8:	3f 70       	andi	r19, 0x0F	; 15
    1dea:	20 93 68 00 	sts	0x0068, r18
    1dee:	83 2f       	mov	r24, r19
    1df0:	80 6c       	ori	r24, 0xC0	; 192
    1df2:	80 93 69 00 	sts	0x0069, r24
    1df6:	e0 92 60 00 	sts	0x0060, r14
    1dfa:	d0 92 61 00 	sts	0x0061, r13
    1dfe:	f5 e4       	ldi	r31, 0x45	; 69
    1e00:	8f 12       	cpse	r8, r31
    1e02:	01 c0       	rjmp	.+2      	; 0x1e06 <main+0x106>
    1e04:	ff cf       	rjmp	.-2      	; 0x1e04 <main+0x104>
    1e06:	f3 01       	movw	r30, r6
    1e08:	c7 be       	out	0x37, r12	; 55
    1e0a:	e8 95       	spm
    1e0c:	07 b6       	in	r0, 0x37	; 55
    1e0e:	00 fc       	sbrc	r0, 0
    1e10:	fd cf       	rjmp	.-6      	; 0x1e0c <main+0x10c>
    1e12:	a3 01       	movw	r20, r6
    1e14:	a0 e6       	ldi	r26, 0x60	; 96
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	2c 91       	ld	r18, X
    1e1a:	12 96       	adiw	r26, 0x02	; 2
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	fc 01       	movw	r30, r24
    1e22:	80 81       	ld	r24, Z
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	38 2b       	or	r19, r24
    1e28:	fa 01       	movw	r30, r20
    1e2a:	09 01       	movw	r0, r18
    1e2c:	b7 be       	out	0x37, r11	; 55
    1e2e:	e8 95       	spm
    1e30:	11 24       	eor	r1, r1
    1e32:	4e 5f       	subi	r20, 0xFE	; 254
    1e34:	5f 4f       	sbci	r21, 0xFF	; 255
    1e36:	9a 12       	cpse	r9, r26
    1e38:	ef cf       	rjmp	.-34     	; 0x1e18 <main+0x118>
    1e3a:	f3 01       	movw	r30, r6
    1e3c:	a7 be       	out	0x37, r10	; 55
    1e3e:	e8 95       	spm
    1e40:	07 b6       	in	r0, 0x37	; 55
    1e42:	00 fc       	sbrc	r0, 0
    1e44:	fd cf       	rjmp	.-6      	; 0x1e40 <main+0x140>
    1e46:	37 c0       	rjmp	.+110    	; 0x1eb6 <main+0x1b6>
    1e48:	84 37       	cpi	r24, 0x74	; 116
    1e4a:	39 f5       	brne	.+78     	; 0x1e9a <main+0x19a>
    1e4c:	46 d0       	rcall	.+140    	; 0x1eda <getch>
    1e4e:	45 d0       	rcall	.+138    	; 0x1eda <getch>
    1e50:	98 2e       	mov	r9, r24
    1e52:	43 d0       	rcall	.+134    	; 0x1eda <getch>
    1e54:	5a d0       	rcall	.+180    	; 0x1f0a <verifySpace>
    1e56:	83 01       	movw	r16, r6
    1e58:	96 0c       	add	r9, r6
    1e5a:	01 15       	cp	r16, r1
    1e5c:	11 05       	cpc	r17, r1
    1e5e:	19 f4       	brne	.+6      	; 0x1e66 <main+0x166>
    1e60:	80 91 e4 00 	lds	r24, 0x00E4
    1e64:	14 c0       	rjmp	.+40     	; 0x1e8e <main+0x18e>
    1e66:	01 30       	cpi	r16, 0x01	; 1
    1e68:	11 05       	cpc	r17, r1
    1e6a:	19 f4       	brne	.+6      	; 0x1e72 <main+0x172>
    1e6c:	80 91 e5 00 	lds	r24, 0x00E5
    1e70:	0e c0       	rjmp	.+28     	; 0x1e8e <main+0x18e>
    1e72:	08 30       	cpi	r16, 0x08	; 8
    1e74:	11 05       	cpc	r17, r1
    1e76:	19 f4       	brne	.+6      	; 0x1e7e <main+0x17e>
    1e78:	80 91 e6 00 	lds	r24, 0x00E6
    1e7c:	08 c0       	rjmp	.+16     	; 0x1e8e <main+0x18e>
    1e7e:	09 30       	cpi	r16, 0x09	; 9
    1e80:	11 05       	cpc	r17, r1
    1e82:	19 f4       	brne	.+6      	; 0x1e8a <main+0x18a>
    1e84:	80 91 e7 00 	lds	r24, 0x00E7
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <main+0x18e>
    1e8a:	f8 01       	movw	r30, r16
    1e8c:	84 91       	lpm	r24, Z
    1e8e:	0f 5f       	subi	r16, 0xFF	; 255
    1e90:	1f 4f       	sbci	r17, 0xFF	; 255
    1e92:	14 d0       	rcall	.+40     	; 0x1ebc <putch>
    1e94:	90 12       	cpse	r9, r16
    1e96:	e1 cf       	rjmp	.-62     	; 0x1e5a <main+0x15a>
    1e98:	0e c0       	rjmp	.+28     	; 0x1eb6 <main+0x1b6>
    1e9a:	85 37       	cpi	r24, 0x75	; 117
    1e9c:	39 f4       	brne	.+14     	; 0x1eac <main+0x1ac>
    1e9e:	35 d0       	rcall	.+106    	; 0x1f0a <verifySpace>
    1ea0:	8e e1       	ldi	r24, 0x1E	; 30
    1ea2:	0c d0       	rcall	.+24     	; 0x1ebc <putch>
    1ea4:	83 e9       	ldi	r24, 0x93	; 147
    1ea6:	0a d0       	rcall	.+20     	; 0x1ebc <putch>
    1ea8:	8c e0       	ldi	r24, 0x0C	; 12
    1eaa:	58 cf       	rjmp	.-336    	; 0x1d5c <main+0x5c>
    1eac:	81 35       	cpi	r24, 0x51	; 81
    1eae:	11 f4       	brne	.+4      	; 0x1eb4 <main+0x1b4>
    1eb0:	88 e0       	ldi	r24, 0x08	; 8
    1eb2:	27 d0       	rcall	.+78     	; 0x1f02 <watchdogConfig>
    1eb4:	2a d0       	rcall	.+84     	; 0x1f0a <verifySpace>
    1eb6:	80 e1       	ldi	r24, 0x10	; 16
    1eb8:	01 d0       	rcall	.+2      	; 0x1ebc <putch>
    1eba:	40 cf       	rjmp	.-384    	; 0x1d3c <main+0x3c>

00001ebc <putch>:
void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
  UART_UDR = ch;
#else
  __asm__ __volatile__ (
    1ebc:	2a e0       	ldi	r18, 0x0A	; 10
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	80 95       	com	r24
    1ec2:	08 94       	sec
    1ec4:	10 f4       	brcc	.+4      	; 0x1eca <putch+0xe>
    1ec6:	da 98       	cbi	0x1b, 2	; 27
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <putch+0x12>
    1eca:	da 9a       	sbi	0x1b, 2	; 27
    1ecc:	00 00       	nop
    1ece:	15 d0       	rcall	.+42     	; 0x1efa <uartDelay>
    1ed0:	14 d0       	rcall	.+40     	; 0x1efa <uartDelay>
    1ed2:	86 95       	lsr	r24
    1ed4:	2a 95       	dec	r18
    1ed6:	b1 f7       	brne	.-20     	; 0x1ec4 <putch+0x8>
    1ed8:	08 95       	ret

00001eda <getch>:
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1eda:	a8 95       	wdr
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    1edc:	29 e0       	ldi	r18, 0x09	; 9
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	cb 99       	sbic	0x19, 3	; 25
    1ee2:	fe cf       	rjmp	.-4      	; 0x1ee0 <getch+0x6>
    1ee4:	0a d0       	rcall	.+20     	; 0x1efa <uartDelay>
    1ee6:	09 d0       	rcall	.+18     	; 0x1efa <uartDelay>
    1ee8:	08 d0       	rcall	.+16     	; 0x1efa <uartDelay>
    1eea:	88 94       	clc
    1eec:	cb 99       	sbic	0x19, 3	; 25
    1eee:	08 94       	sec
    1ef0:	2a 95       	dec	r18
    1ef2:	11 f0       	breq	.+4      	; 0x1ef8 <getch+0x1e>
    1ef4:	87 95       	ror	r24
    1ef6:	f7 cf       	rjmp	.-18     	; 0x1ee6 <getch+0xc>
    1ef8:	08 95       	ret

00001efa <uartDelay>:
#if UART_B_VALUE > 255
#error Baud rate too slow for soft UART
#endif

void uartDelay() {
  __asm__ __volatile__ (
    1efa:	9e e0       	ldi	r25, 0x0E	; 14
    1efc:	9a 95       	dec	r25
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <uartDelay+0x2>
    1f00:	08 95       	ret

00001f02 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1f02:	98 e1       	ldi	r25, 0x18	; 24
    1f04:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    1f06:	81 bd       	out	0x21, r24	; 33
    1f08:	08 95       	ret

00001f0a <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1f0a:	e7 df       	rcall	.-50     	; 0x1eda <getch>
    1f0c:	80 32       	cpi	r24, 0x20	; 32
    1f0e:	19 f0       	breq	.+6      	; 0x1f16 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1f10:	88 e0       	ldi	r24, 0x08	; 8
    1f12:	f7 df       	rcall	.-18     	; 0x1f02 <watchdogConfig>
    1f14:	ff cf       	rjmp	.-2      	; 0x1f14 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    1f16:	84 e1       	ldi	r24, 0x14	; 20
    1f18:	d1 cf       	rjmp	.-94     	; 0x1ebc <putch>

00001f1a <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    1f1a:	cf 93       	push	r28
    1f1c:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1f1e:	dd df       	rcall	.-70     	; 0x1eda <getch>
    1f20:	c1 50       	subi	r28, 0x01	; 1
    1f22:	e9 f7       	brne	.-6      	; 0x1f1e <getNch+0x4>
  verifySpace();
}
    1f24:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    1f26:	f1 cf       	rjmp	.-30     	; 0x1f0a <verifySpace>

00001f28 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    1f28:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	ea df       	rcall	.-44     	; 0x1f02 <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    1f2e:	e4 e0       	ldi	r30, 0x04	; 4
    1f30:	ff 27       	eor	r31, r31
    1f32:	09 94       	ijmp
