
optiboot_atmega168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00003fcc  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001cc  00003e00  00003e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00003ffe  00003ffe  00000260  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000c18  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d6d  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001be9  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00003e00 <main>:
    3e00:	1f 92       	push	r1
    3e02:	cd b7       	in	r28, 0x3d	; 61
    3e04:	de b7       	in	r29, 0x3e	; 62
    3e06:	11 24       	eor	r1, r1
    3e08:	84 b7       	in	r24, 0x34	; 52
    3e0a:	14 be       	out	0x34, r1	; 52
    3e0c:	98 2f       	mov	r25, r24
    3e0e:	9d 70       	andi	r25, 0x0D	; 13
    3e10:	09 f0       	breq	.+2      	; 0x3e14 <main+0x14>
    3e12:	d6 d0       	rcall	.+428    	; 0x3fc0 <appStart>
    3e14:	85 e0       	ldi	r24, 0x05	; 5
    3e16:	80 93 81 00 	sts	0x0081, r24
    3e1a:	82 e0       	ldi	r24, 0x02	; 2
    3e1c:	80 93 c0 00 	sts	0x00C0, r24
    3e20:	88 e1       	ldi	r24, 0x18	; 24
    3e22:	80 93 c1 00 	sts	0x00C1, r24
    3e26:	86 e0       	ldi	r24, 0x06	; 6
    3e28:	80 93 c2 00 	sts	0x00C2, r24
    3e2c:	82 e2       	ldi	r24, 0x22	; 34
    3e2e:	80 93 c4 00 	sts	0x00C4, r24
    3e32:	8e e0       	ldi	r24, 0x0E	; 14
    3e34:	b0 d0       	rcall	.+352    	; 0x3f96 <watchdogConfig>
    3e36:	25 9a       	sbi	0x04, 5	; 4
    3e38:	26 e0       	ldi	r18, 0x06	; 6
    3e3a:	80 e3       	ldi	r24, 0x30	; 48
    3e3c:	9c ef       	ldi	r25, 0xFC	; 252
    3e3e:	31 e0       	ldi	r19, 0x01	; 1
    3e40:	90 93 85 00 	sts	0x0085, r25
    3e44:	80 93 84 00 	sts	0x0084, r24
    3e48:	36 bb       	out	0x16, r19	; 22
    3e4a:	b0 9b       	sbis	0x16, 0	; 22
    3e4c:	fe cf       	rjmp	.-4      	; 0x3e4a <main+0x4a>
    3e4e:	1d 9a       	sbi	0x03, 5	; 3
    3e50:	a8 95       	wdr
    3e52:	21 50       	subi	r18, 0x01	; 1
    3e54:	a9 f7       	brne	.-22     	; 0x3e40 <main+0x40>
    3e56:	81 2c       	mov	r8, r1
    3e58:	91 2c       	mov	r9, r1
    3e5a:	93 e0       	ldi	r25, 0x03	; 3
    3e5c:	f9 2e       	mov	r15, r25
    3e5e:	ee 24       	eor	r14, r14
    3e60:	e3 94       	inc	r14
    3e62:	25 e0       	ldi	r18, 0x05	; 5
    3e64:	d2 2e       	mov	r13, r18
    3e66:	31 e1       	ldi	r19, 0x11	; 17
    3e68:	c3 2e       	mov	r12, r19
    3e6a:	89 d0       	rcall	.+274    	; 0x3f7e <getch>
    3e6c:	81 34       	cpi	r24, 0x41	; 65
    3e6e:	71 f4       	brne	.+28     	; 0x3e8c <main+0x8c>
    3e70:	86 d0       	rcall	.+268    	; 0x3f7e <getch>
    3e72:	89 83       	std	Y+1, r24	; 0x01
    3e74:	96 d0       	rcall	.+300    	; 0x3fa2 <verifySpace>
    3e76:	89 81       	ldd	r24, Y+1	; 0x01
    3e78:	82 38       	cpi	r24, 0x82	; 130
    3e7a:	11 f4       	brne	.+4      	; 0x3e80 <main+0x80>
    3e7c:	82 e0       	ldi	r24, 0x02	; 2
    3e7e:	04 c0       	rjmp	.+8      	; 0x3e88 <main+0x88>
    3e80:	81 38       	cpi	r24, 0x81	; 129
    3e82:	09 f4       	brne	.+2      	; 0x3e86 <main+0x86>
    3e84:	6b c0       	rjmp	.+214    	; 0x3f5c <main+0x15c>
    3e86:	83 e0       	ldi	r24, 0x03	; 3
    3e88:	73 d0       	rcall	.+230    	; 0x3f70 <putch>
    3e8a:	6f c0       	rjmp	.+222    	; 0x3f6a <main+0x16a>
    3e8c:	82 34       	cpi	r24, 0x42	; 66
    3e8e:	11 f4       	brne	.+4      	; 0x3e94 <main+0x94>
    3e90:	84 e1       	ldi	r24, 0x14	; 20
    3e92:	03 c0       	rjmp	.+6      	; 0x3e9a <main+0x9a>
    3e94:	85 34       	cpi	r24, 0x45	; 69
    3e96:	19 f4       	brne	.+6      	; 0x3e9e <main+0x9e>
    3e98:	85 e0       	ldi	r24, 0x05	; 5
    3e9a:	8b d0       	rcall	.+278    	; 0x3fb2 <getNch>
    3e9c:	66 c0       	rjmp	.+204    	; 0x3f6a <main+0x16a>
    3e9e:	85 35       	cpi	r24, 0x55	; 85
    3ea0:	41 f4       	brne	.+16     	; 0x3eb2 <main+0xb2>
    3ea2:	6d d0       	rcall	.+218    	; 0x3f7e <getch>
    3ea4:	88 2e       	mov	r8, r24
    3ea6:	6b d0       	rcall	.+214    	; 0x3f7e <getch>
    3ea8:	91 2c       	mov	r9, r1
    3eaa:	98 2a       	or	r9, r24
    3eac:	88 0c       	add	r8, r8
    3eae:	99 1c       	adc	r9, r9
    3eb0:	5b c0       	rjmp	.+182    	; 0x3f68 <main+0x168>
    3eb2:	86 35       	cpi	r24, 0x56	; 86
    3eb4:	21 f4       	brne	.+8      	; 0x3ebe <main+0xbe>
    3eb6:	84 e0       	ldi	r24, 0x04	; 4
    3eb8:	7c d0       	rcall	.+248    	; 0x3fb2 <getNch>
    3eba:	80 e0       	ldi	r24, 0x00	; 0
    3ebc:	e5 cf       	rjmp	.-54     	; 0x3e88 <main+0x88>
    3ebe:	84 36       	cpi	r24, 0x64	; 100
    3ec0:	09 f0       	breq	.+2      	; 0x3ec4 <main+0xc4>
    3ec2:	36 c0       	rjmp	.+108    	; 0x3f30 <main+0x130>
    3ec4:	5c d0       	rcall	.+184    	; 0x3f7e <getch>
    3ec6:	5b d0       	rcall	.+182    	; 0x3f7e <getch>
    3ec8:	b8 2e       	mov	r11, r24
    3eca:	59 d0       	rcall	.+178    	; 0x3f7e <getch>
    3ecc:	a8 2e       	mov	r10, r24
    3ece:	00 e0       	ldi	r16, 0x00	; 0
    3ed0:	11 e0       	ldi	r17, 0x01	; 1
    3ed2:	55 d0       	rcall	.+170    	; 0x3f7e <getch>
    3ed4:	f8 01       	movw	r30, r16
    3ed6:	81 93       	st	Z+, r24
    3ed8:	8f 01       	movw	r16, r30
    3eda:	be 12       	cpse	r11, r30
    3edc:	fa cf       	rjmp	.-12     	; 0x3ed2 <main+0xd2>
    3ede:	61 d0       	rcall	.+194    	; 0x3fa2 <verifySpace>
    3ee0:	f5 e4       	ldi	r31, 0x45	; 69
    3ee2:	af 12       	cpse	r10, r31
    3ee4:	01 c0       	rjmp	.+2      	; 0x3ee8 <main+0xe8>
    3ee6:	ff cf       	rjmp	.-2      	; 0x3ee6 <main+0xe6>
    3ee8:	f4 01       	movw	r30, r8
    3eea:	f7 be       	out	0x37, r15	; 55
    3eec:	e8 95       	spm
    3eee:	07 b6       	in	r0, 0x37	; 55
    3ef0:	00 fc       	sbrc	r0, 0
    3ef2:	fd cf       	rjmp	.-6      	; 0x3eee <main+0xee>
    3ef4:	b4 01       	movw	r22, r8
    3ef6:	a0 e0       	ldi	r26, 0x00	; 0
    3ef8:	b1 e0       	ldi	r27, 0x01	; 1
    3efa:	2c 91       	ld	r18, X
    3efc:	12 96       	adiw	r26, 0x02	; 2
    3efe:	ad 01       	movw	r20, r26
    3f00:	41 50       	subi	r20, 0x01	; 1
    3f02:	51 09       	sbc	r21, r1
    3f04:	fa 01       	movw	r30, r20
    3f06:	80 81       	ld	r24, Z
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	38 2b       	or	r19, r24
    3f0c:	fb 01       	movw	r30, r22
    3f0e:	09 01       	movw	r0, r18
    3f10:	e7 be       	out	0x37, r14	; 55
    3f12:	e8 95       	spm
    3f14:	11 24       	eor	r1, r1
    3f16:	6e 5f       	subi	r22, 0xFE	; 254
    3f18:	7f 4f       	sbci	r23, 0xFF	; 255
    3f1a:	ba 12       	cpse	r11, r26
    3f1c:	ee cf       	rjmp	.-36     	; 0x3efa <main+0xfa>
    3f1e:	f4 01       	movw	r30, r8
    3f20:	d7 be       	out	0x37, r13	; 55
    3f22:	e8 95       	spm
    3f24:	07 b6       	in	r0, 0x37	; 55
    3f26:	00 fc       	sbrc	r0, 0
    3f28:	fd cf       	rjmp	.-6      	; 0x3f24 <main+0x124>
    3f2a:	c7 be       	out	0x37, r12	; 55
    3f2c:	e8 95       	spm
    3f2e:	1d c0       	rjmp	.+58     	; 0x3f6a <main+0x16a>
    3f30:	84 37       	cpi	r24, 0x74	; 116
    3f32:	69 f4       	brne	.+26     	; 0x3f4e <main+0x14e>
    3f34:	24 d0       	rcall	.+72     	; 0x3f7e <getch>
    3f36:	23 d0       	rcall	.+70     	; 0x3f7e <getch>
    3f38:	b8 2e       	mov	r11, r24
    3f3a:	21 d0       	rcall	.+66     	; 0x3f7e <getch>
    3f3c:	32 d0       	rcall	.+100    	; 0x3fa2 <verifySpace>
    3f3e:	84 01       	movw	r16, r8
    3f40:	f8 01       	movw	r30, r16
    3f42:	85 91       	lpm	r24, Z+
    3f44:	8f 01       	movw	r16, r30
    3f46:	14 d0       	rcall	.+40     	; 0x3f70 <putch>
    3f48:	ba 94       	dec	r11
    3f4a:	d1 f7       	brne	.-12     	; 0x3f40 <main+0x140>
    3f4c:	0e c0       	rjmp	.+28     	; 0x3f6a <main+0x16a>
    3f4e:	85 37       	cpi	r24, 0x75	; 117
    3f50:	39 f4       	brne	.+14     	; 0x3f60 <main+0x160>
    3f52:	27 d0       	rcall	.+78     	; 0x3fa2 <verifySpace>
    3f54:	8e e1       	ldi	r24, 0x1E	; 30
    3f56:	0c d0       	rcall	.+24     	; 0x3f70 <putch>
    3f58:	84 e9       	ldi	r24, 0x94	; 148
    3f5a:	0a d0       	rcall	.+20     	; 0x3f70 <putch>
    3f5c:	86 e0       	ldi	r24, 0x06	; 6
    3f5e:	94 cf       	rjmp	.-216    	; 0x3e88 <main+0x88>
    3f60:	81 35       	cpi	r24, 0x51	; 81
    3f62:	11 f4       	brne	.+4      	; 0x3f68 <main+0x168>
    3f64:	88 e0       	ldi	r24, 0x08	; 8
    3f66:	17 d0       	rcall	.+46     	; 0x3f96 <watchdogConfig>
    3f68:	1c d0       	rcall	.+56     	; 0x3fa2 <verifySpace>
    3f6a:	80 e1       	ldi	r24, 0x10	; 16
    3f6c:	01 d0       	rcall	.+2      	; 0x3f70 <putch>
    3f6e:	7d cf       	rjmp	.-262    	; 0x3e6a <main+0x6a>

00003f70 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    3f70:	90 91 c0 00 	lds	r25, 0x00C0
    3f74:	95 ff       	sbrs	r25, 5
    3f76:	fc cf       	rjmp	.-8      	; 0x3f70 <putch>
  UART_UDR = ch;
    3f78:	80 93 c6 00 	sts	0x00C6, r24
    3f7c:	08 95       	ret

00003f7e <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    3f7e:	80 91 c0 00 	lds	r24, 0x00C0
    3f82:	87 ff       	sbrs	r24, 7
    3f84:	fc cf       	rjmp	.-8      	; 0x3f7e <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    3f86:	80 91 c0 00 	lds	r24, 0x00C0
    3f8a:	84 fd       	sbrc	r24, 4
    3f8c:	01 c0       	rjmp	.+2      	; 0x3f90 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3f8e:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    3f90:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    3f94:	08 95       	ret

00003f96 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    3f96:	e0 e6       	ldi	r30, 0x60	; 96
    3f98:	f0 e0       	ldi	r31, 0x00	; 0
    3f9a:	98 e1       	ldi	r25, 0x18	; 24
    3f9c:	90 83       	st	Z, r25
  WDTCSR = x;
    3f9e:	80 83       	st	Z, r24
    3fa0:	08 95       	ret

00003fa2 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    3fa2:	ed df       	rcall	.-38     	; 0x3f7e <getch>
    3fa4:	80 32       	cpi	r24, 0x20	; 32
    3fa6:	19 f0       	breq	.+6      	; 0x3fae <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    3fa8:	88 e0       	ldi	r24, 0x08	; 8
    3faa:	f5 df       	rcall	.-22     	; 0x3f96 <watchdogConfig>
    3fac:	ff cf       	rjmp	.-2      	; 0x3fac <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    3fae:	84 e1       	ldi	r24, 0x14	; 20
    3fb0:	df cf       	rjmp	.-66     	; 0x3f70 <putch>

00003fb2 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    3fb2:	cf 93       	push	r28
    3fb4:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    3fb6:	e3 df       	rcall	.-58     	; 0x3f7e <getch>
    3fb8:	c1 50       	subi	r28, 0x01	; 1
    3fba:	e9 f7       	brne	.-6      	; 0x3fb6 <getNch+0x4>
  verifySpace();
}
    3fbc:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    3fbe:	f1 cf       	rjmp	.-30     	; 0x3fa2 <verifySpace>

00003fc0 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    3fc0:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    3fc2:	80 e0       	ldi	r24, 0x00	; 0
    3fc4:	e8 df       	rcall	.-48     	; 0x3f96 <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    3fc6:	e0 e0       	ldi	r30, 0x00	; 0
    3fc8:	ff 27       	eor	r31, r31
    3fca:	09 94       	ijmp
