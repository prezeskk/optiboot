
optiboot_atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00007e00  00007e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00007ffe  00007ffe  00000252  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000000  00800060  00007fbe  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         00000c30  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d58  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007e00 <main>:
    7e00:	1f 92       	push	r1
    7e02:	cd b7       	in	r28, 0x3d	; 61
    7e04:	de b7       	in	r29, 0x3e	; 62
    7e06:	11 24       	eor	r1, r1
    7e08:	8f e5       	ldi	r24, 0x5F	; 95
    7e0a:	98 e0       	ldi	r25, 0x08	; 8
    7e0c:	9e bf       	out	0x3e, r25	; 62
    7e0e:	8d bf       	out	0x3d, r24	; 61
    7e10:	84 b7       	in	r24, 0x34	; 52
    7e12:	14 be       	out	0x34, r1	; 52
    7e14:	98 2f       	mov	r25, r24
    7e16:	9d 70       	andi	r25, 0x0D	; 13
    7e18:	09 f0       	breq	.+2      	; 0x7e1c <main+0x1c>
    7e1a:	cb d0       	rcall	.+406    	; 0x7fb2 <appStart>
    7e1c:	85 e0       	ldi	r24, 0x05	; 5
    7e1e:	8e bd       	out	0x2e, r24	; 46
    7e20:	82 e0       	ldi	r24, 0x02	; 2
    7e22:	8b b9       	out	0x0b, r24	; 11
    7e24:	88 e1       	ldi	r24, 0x18	; 24
    7e26:	8a b9       	out	0x0a, r24	; 10
    7e28:	86 e8       	ldi	r24, 0x86	; 134
    7e2a:	80 bd       	out	0x20, r24	; 32
    7e2c:	8b e0       	ldi	r24, 0x0B	; 11
    7e2e:	89 b9       	out	0x09, r24	; 9
    7e30:	8e e0       	ldi	r24, 0x0E	; 14
    7e32:	ac d0       	rcall	.+344    	; 0x7f8c <watchdogConfig>
    7e34:	b8 9a       	sbi	0x17, 0	; 23
    7e36:	26 e0       	ldi	r18, 0x06	; 6
    7e38:	8d e5       	ldi	r24, 0x5D	; 93
    7e3a:	9d ef       	ldi	r25, 0xFD	; 253
    7e3c:	54 e0       	ldi	r21, 0x04	; 4
    7e3e:	41 e0       	ldi	r20, 0x01	; 1
    7e40:	9d bd       	out	0x2d, r25	; 45
    7e42:	8c bd       	out	0x2c, r24	; 44
    7e44:	58 bf       	out	0x38, r21	; 56
    7e46:	08 b6       	in	r0, 0x38	; 56
    7e48:	02 fe       	sbrs	r0, 2
    7e4a:	fd cf       	rjmp	.-6      	; 0x7e46 <main+0x46>
    7e4c:	38 b3       	in	r19, 0x18	; 24
    7e4e:	34 27       	eor	r19, r20
    7e50:	38 bb       	out	0x18, r19	; 24
    7e52:	a8 95       	wdr
    7e54:	21 50       	subi	r18, 0x01	; 1
    7e56:	a1 f7       	brne	.-24     	; 0x7e40 <main+0x40>
    7e58:	81 2c       	mov	r8, r1
    7e5a:	91 2c       	mov	r9, r1
    7e5c:	93 e0       	ldi	r25, 0x03	; 3
    7e5e:	f9 2e       	mov	r15, r25
    7e60:	ee 24       	eor	r14, r14
    7e62:	e3 94       	inc	r14
    7e64:	25 e0       	ldi	r18, 0x05	; 5
    7e66:	d2 2e       	mov	r13, r18
    7e68:	31 e1       	ldi	r19, 0x11	; 17
    7e6a:	c3 2e       	mov	r12, r19
    7e6c:	88 d0       	rcall	.+272    	; 0x7f7e <getch>
    7e6e:	81 34       	cpi	r24, 0x41	; 65
    7e70:	71 f4       	brne	.+28     	; 0x7e8e <main+0x8e>
    7e72:	85 d0       	rcall	.+266    	; 0x7f7e <getch>
    7e74:	89 83       	std	Y+1, r24	; 0x01
    7e76:	8e d0       	rcall	.+284    	; 0x7f94 <verifySpace>
    7e78:	89 81       	ldd	r24, Y+1	; 0x01
    7e7a:	82 38       	cpi	r24, 0x82	; 130
    7e7c:	09 f4       	brne	.+2      	; 0x7e80 <main+0x80>
    7e7e:	71 c0       	rjmp	.+226    	; 0x7f62 <main+0x162>
    7e80:	81 38       	cpi	r24, 0x81	; 129
    7e82:	11 f4       	brne	.+4      	; 0x7e88 <main+0x88>
    7e84:	86 e0       	ldi	r24, 0x06	; 6
    7e86:	01 c0       	rjmp	.+2      	; 0x7e8a <main+0x8a>
    7e88:	83 e0       	ldi	r24, 0x03	; 3
    7e8a:	75 d0       	rcall	.+234    	; 0x7f76 <putch>
    7e8c:	71 c0       	rjmp	.+226    	; 0x7f70 <main+0x170>
    7e8e:	82 34       	cpi	r24, 0x42	; 66
    7e90:	11 f4       	brne	.+4      	; 0x7e96 <main+0x96>
    7e92:	84 e1       	ldi	r24, 0x14	; 20
    7e94:	03 c0       	rjmp	.+6      	; 0x7e9c <main+0x9c>
    7e96:	85 34       	cpi	r24, 0x45	; 69
    7e98:	19 f4       	brne	.+6      	; 0x7ea0 <main+0xa0>
    7e9a:	85 e0       	ldi	r24, 0x05	; 5
    7e9c:	83 d0       	rcall	.+262    	; 0x7fa4 <getNch>
    7e9e:	68 c0       	rjmp	.+208    	; 0x7f70 <main+0x170>
    7ea0:	85 35       	cpi	r24, 0x55	; 85
    7ea2:	41 f4       	brne	.+16     	; 0x7eb4 <main+0xb4>
    7ea4:	6c d0       	rcall	.+216    	; 0x7f7e <getch>
    7ea6:	88 2e       	mov	r8, r24
    7ea8:	6a d0       	rcall	.+212    	; 0x7f7e <getch>
    7eaa:	91 2c       	mov	r9, r1
    7eac:	98 2a       	or	r9, r24
    7eae:	88 0c       	add	r8, r8
    7eb0:	99 1c       	adc	r9, r9
    7eb2:	5d c0       	rjmp	.+186    	; 0x7f6e <main+0x16e>
    7eb4:	86 35       	cpi	r24, 0x56	; 86
    7eb6:	21 f4       	brne	.+8      	; 0x7ec0 <main+0xc0>
    7eb8:	84 e0       	ldi	r24, 0x04	; 4
    7eba:	74 d0       	rcall	.+232    	; 0x7fa4 <getNch>
    7ebc:	80 e0       	ldi	r24, 0x00	; 0
    7ebe:	e5 cf       	rjmp	.-54     	; 0x7e8a <main+0x8a>
    7ec0:	84 36       	cpi	r24, 0x64	; 100
    7ec2:	09 f0       	breq	.+2      	; 0x7ec6 <main+0xc6>
    7ec4:	38 c0       	rjmp	.+112    	; 0x7f36 <main+0x136>
    7ec6:	5b d0       	rcall	.+182    	; 0x7f7e <getch>
    7ec8:	5a d0       	rcall	.+180    	; 0x7f7e <getch>
    7eca:	b8 2e       	mov	r11, r24
    7ecc:	58 d0       	rcall	.+176    	; 0x7f7e <getch>
    7ece:	a8 2e       	mov	r10, r24
    7ed0:	00 e6       	ldi	r16, 0x60	; 96
    7ed2:	10 e0       	ldi	r17, 0x00	; 0
    7ed4:	80 e6       	ldi	r24, 0x60	; 96
    7ed6:	b8 0e       	add	r11, r24
    7ed8:	52 d0       	rcall	.+164    	; 0x7f7e <getch>
    7eda:	f8 01       	movw	r30, r16
    7edc:	81 93       	st	Z+, r24
    7ede:	8f 01       	movw	r16, r30
    7ee0:	be 12       	cpse	r11, r30
    7ee2:	fa cf       	rjmp	.-12     	; 0x7ed8 <main+0xd8>
    7ee4:	57 d0       	rcall	.+174    	; 0x7f94 <verifySpace>
    7ee6:	f5 e4       	ldi	r31, 0x45	; 69
    7ee8:	af 12       	cpse	r10, r31
    7eea:	01 c0       	rjmp	.+2      	; 0x7eee <main+0xee>
    7eec:	ff cf       	rjmp	.-2      	; 0x7eec <main+0xec>
    7eee:	f4 01       	movw	r30, r8
    7ef0:	f7 be       	out	0x37, r15	; 55
    7ef2:	e8 95       	spm
    7ef4:	07 b6       	in	r0, 0x37	; 55
    7ef6:	00 fc       	sbrc	r0, 0
    7ef8:	fd cf       	rjmp	.-6      	; 0x7ef4 <main+0xf4>
    7efa:	b4 01       	movw	r22, r8
    7efc:	a0 e6       	ldi	r26, 0x60	; 96
    7efe:	b0 e0       	ldi	r27, 0x00	; 0
    7f00:	2c 91       	ld	r18, X
    7f02:	12 96       	adiw	r26, 0x02	; 2
    7f04:	ad 01       	movw	r20, r26
    7f06:	41 50       	subi	r20, 0x01	; 1
    7f08:	51 09       	sbc	r21, r1
    7f0a:	fa 01       	movw	r30, r20
    7f0c:	80 81       	ld	r24, Z
    7f0e:	30 e0       	ldi	r19, 0x00	; 0
    7f10:	38 2b       	or	r19, r24
    7f12:	fb 01       	movw	r30, r22
    7f14:	09 01       	movw	r0, r18
    7f16:	e7 be       	out	0x37, r14	; 55
    7f18:	e8 95       	spm
    7f1a:	11 24       	eor	r1, r1
    7f1c:	6e 5f       	subi	r22, 0xFE	; 254
    7f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    7f20:	ba 12       	cpse	r11, r26
    7f22:	ee cf       	rjmp	.-36     	; 0x7f00 <main+0x100>
    7f24:	f4 01       	movw	r30, r8
    7f26:	d7 be       	out	0x37, r13	; 55
    7f28:	e8 95       	spm
    7f2a:	07 b6       	in	r0, 0x37	; 55
    7f2c:	00 fc       	sbrc	r0, 0
    7f2e:	fd cf       	rjmp	.-6      	; 0x7f2a <main+0x12a>
    7f30:	c7 be       	out	0x37, r12	; 55
    7f32:	e8 95       	spm
    7f34:	1d c0       	rjmp	.+58     	; 0x7f70 <main+0x170>
    7f36:	84 37       	cpi	r24, 0x74	; 116
    7f38:	69 f4       	brne	.+26     	; 0x7f54 <main+0x154>
    7f3a:	21 d0       	rcall	.+66     	; 0x7f7e <getch>
    7f3c:	20 d0       	rcall	.+64     	; 0x7f7e <getch>
    7f3e:	b8 2e       	mov	r11, r24
    7f40:	1e d0       	rcall	.+60     	; 0x7f7e <getch>
    7f42:	28 d0       	rcall	.+80     	; 0x7f94 <verifySpace>
    7f44:	84 01       	movw	r16, r8
    7f46:	f8 01       	movw	r30, r16
    7f48:	85 91       	lpm	r24, Z+
    7f4a:	8f 01       	movw	r16, r30
    7f4c:	14 d0       	rcall	.+40     	; 0x7f76 <putch>
    7f4e:	ba 94       	dec	r11
    7f50:	d1 f7       	brne	.-12     	; 0x7f46 <main+0x146>
    7f52:	0e c0       	rjmp	.+28     	; 0x7f70 <main+0x170>
    7f54:	85 37       	cpi	r24, 0x75	; 117
    7f56:	39 f4       	brne	.+14     	; 0x7f66 <main+0x166>
    7f58:	1d d0       	rcall	.+58     	; 0x7f94 <verifySpace>
    7f5a:	8e e1       	ldi	r24, 0x1E	; 30
    7f5c:	0c d0       	rcall	.+24     	; 0x7f76 <putch>
    7f5e:	85 e9       	ldi	r24, 0x95	; 149
    7f60:	0a d0       	rcall	.+20     	; 0x7f76 <putch>
    7f62:	82 e0       	ldi	r24, 0x02	; 2
    7f64:	92 cf       	rjmp	.-220    	; 0x7e8a <main+0x8a>
    7f66:	81 35       	cpi	r24, 0x51	; 81
    7f68:	11 f4       	brne	.+4      	; 0x7f6e <main+0x16e>
    7f6a:	88 e0       	ldi	r24, 0x08	; 8
    7f6c:	0f d0       	rcall	.+30     	; 0x7f8c <watchdogConfig>
    7f6e:	12 d0       	rcall	.+36     	; 0x7f94 <verifySpace>
    7f70:	80 e1       	ldi	r24, 0x10	; 16
    7f72:	01 d0       	rcall	.+2      	; 0x7f76 <putch>
    7f74:	7b cf       	rjmp	.-266    	; 0x7e6c <main+0x6c>

00007f76 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7f76:	5d 9b       	sbis	0x0b, 5	; 11
    7f78:	fe cf       	rjmp	.-4      	; 0x7f76 <putch>
  UART_UDR = ch;
    7f7a:	8c b9       	out	0x0c, r24	; 12
    7f7c:	08 95       	ret

00007f7e <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7f7e:	5f 9b       	sbis	0x0b, 7	; 11
    7f80:	fe cf       	rjmp	.-4      	; 0x7f7e <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7f82:	5c 99       	sbic	0x0b, 4	; 11
    7f84:	01 c0       	rjmp	.+2      	; 0x7f88 <getch+0xa>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7f86:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    7f88:	8c b1       	in	r24, 0x0c	; 12
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7f8a:	08 95       	ret

00007f8c <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7f8c:	98 e1       	ldi	r25, 0x18	; 24
    7f8e:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    7f90:	81 bd       	out	0x21, r24	; 33
    7f92:	08 95       	ret

00007f94 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7f94:	f4 df       	rcall	.-24     	; 0x7f7e <getch>
    7f96:	80 32       	cpi	r24, 0x20	; 32
    7f98:	19 f0       	breq	.+6      	; 0x7fa0 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7f9a:	88 e0       	ldi	r24, 0x08	; 8
    7f9c:	f7 df       	rcall	.-18     	; 0x7f8c <watchdogConfig>
    7f9e:	ff cf       	rjmp	.-2      	; 0x7f9e <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7fa0:	84 e1       	ldi	r24, 0x14	; 20
    7fa2:	e9 cf       	rjmp	.-46     	; 0x7f76 <putch>

00007fa4 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fa4:	cf 93       	push	r28
    7fa6:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7fa8:	ea df       	rcall	.-44     	; 0x7f7e <getch>
    7faa:	c1 50       	subi	r28, 0x01	; 1
    7fac:	e9 f7       	brne	.-6      	; 0x7fa8 <getNch+0x4>
  verifySpace();
}
    7fae:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    7fb0:	f1 cf       	rjmp	.-30     	; 0x7f94 <verifySpace>

00007fb2 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7fb2:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7fb4:	80 e0       	ldi	r24, 0x00	; 0
    7fb6:	ea df       	rcall	.-44     	; 0x7f8c <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    7fb8:	e0 e0       	ldi	r30, 0x00	; 0
    7fba:	ff 27       	eor	r31, r31
    7fbc:	09 94       	ijmp
